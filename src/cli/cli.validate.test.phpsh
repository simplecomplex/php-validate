<?php
/**
 * SimpleComplex PHP Validate
 * @link      https://github.com/simplecomplex/php-validate
 * @copyright Copyright (c) 2017 Jacob Friis Mathiasen
 * @license   https://github.com/simplecomplex/php-validate/blob/master/LICENSE (MIT License)
 */
declare(strict_types=1);

// Include Composer autoloader - re-usable snippet.-----------------------------
(function()
{
    $path = getcwd();
    $dir = dirname($path);
    // Executed in [package] dir.
    if (basename(dirname($dir)) == 'vendor') {
        require '../../autoload.php';
        return;
    }
    // Executed in [package]/src/cli.
    elseif (basename($path) == 'cli' && basename($dir) == 'src') {
        require '../../../../autoload.php';
        return;
    }
    // Executed in document root; one or two stops above 'vendor' dir.
    $vendor_dir = 'vendor';
    $vendor_path = '';
    if (file_exists($vendor_dir) && is_dir($vendor_dir)) {
        $vendor_path = $vendor_dir;
    } else {
        $iter = new \FilesystemIterator($path, \FilesystemIterator::FOLLOW_SYMLINKS);
        foreach ($iter as $item) {
            if ($item->isDir()) {
                $path = $item->getPathName();
                $sub_iter = new \FilesystemIterator($path, \FilesystemIterator::FOLLOW_SYMLINKS);
                foreach ($sub_iter as $sub_item) {
                    if ($sub_item->isDir() && $sub_item->getFilename() == $vendor_dir) {
                        $vendor_path = $path . '/' . $vendor_dir;
                        break 2;
                    }
                }
            }
        }
    }
    if ($vendor_path) {
        require $vendor_path . '/autoload.php';
        return;
    }
    echo "\033[01;31m[error]\033[0m Can't locate composer autoload.\nChange dir to this script's dir, and try again.\n";
    exit;
})();
// /Include Composer autoloader - re-usable snippet.----------------------------


// Work.------------------------------------------------------------------------
use \SimpleComplex\Utils\Dependency;
use \SimpleComplex\Validate\Validate;
use \SimpleComplex\Validate\ValidationRuleSet;


/**
 * @code
 * # CLI
 * cd vendor/simplecomplex/validate/src/cli
 * php cli.validate.test.phpsh
 * @endcode
 */
function simple_complex_validate_test_cli()
{
    $container = Dependency::container();
    if (class_exists('\\SimpleComplex\\Cache\\CacheBroker')) {
        Dependency::genericSet('cache-broker', function() {
            return new \SimpleComplex\Cache\CacheBroker();
        });
    }
    if (class_exists('\\SimpleComplex\\Config\\Config')) {
        Dependency::genericSet('config', function() {
            return new \SimpleComplex\Config\Config('global');
        });
    }
    if (class_exists('\\SimpleComplex\\JsonLog\\JsonLog')) {
        Dependency::genericSet('logger', function() use ($container) {
            return new \SimpleComplex\JsonLog\JsonLog($container->has('config') ? $container->get('config') : null);
        });
    }
    if (class_exists('\\SimpleComplex\\Inspect\\Inspect')) {
        Dependency::genericSet('inspector', function() use ($container) {
            return new \SimpleComplex\Inspect\Inspect($container->has('config') ? $container->get('config') : null);
        });
    }

    // Exception handler, which catches errors that it itself instigates;
    // errors occurring while instantiating container objects.
    set_exception_handler(function(\Throwable $throwable) use ($container) {
        try {
            $container = Dependency::container();
            $trace = null;
            if ($container->has('inspector')) {
                $trace = '' . $container->get('inspector')->trace($throwable);
            }
            if ($container->has('logger')) {
                $container->get('logger')->error($trace ?? $throwable);
            }
            echo ($trace ?? $throwable) . "\n"; exit;
        } catch (\Throwable $xc) {
            echo $throwable . "\n"; exit;
        }
    });


    /** @var \SimpleComplex\Inspect\Inspect $inspect */
    $inspect = $container->get('inspector');
    /** @var \Psr\Log\LoggerInterface $logger */
    $logger = $container->get('logger');


    $rules = [
        'class' => [
            'Bicycle'
        ],
        'tableElements' => [
            'wheels' => [
                'integer',
                'range' => [
                    1,
                    3
                ]
            ],
            'saddle' => [
                'integer',
                'alternativeEnum' => [
                    // Wrongly defined as nested; confused by enum which
                    // formally requires to be nested.
                    // But ValidationRuleSet fixes this, as it does with
                    // the opposite for (un-nested) enum.
                    [
                        true,
                    ]
                ]
            ],
            'sound' => [
                'string' => true,
                'enum' => [
                    // Counterintuitive nesting, but formally correct because
                    // the allowed values array is second arg to the enum()
                    // method.
                    // ValidationRuleSet fixes un-nested instance.
                    [
                        'silent',
                        'swooshy',
                        'clattering',
                    ]
                ]
            ],
            'accessories' => [
                'array',
                'tableElements' => [
                    'luggageCarrier' => [
                        'boolean',
                        'optional'
                    ],
                    'lights' => [
                        'numeric',
                        'optional'
                    ]
                ]
            ],
            'various' => [
                'array',
                'optional',
                'alternativeEnum' => [
                    null,
                ],
                'listItemPrototype' => [
                    'string',
                    'alternativeEnum' => [
                        // Correctly defined as un-nested array.
                        true,
                        false,
                        null,
                    ]
                ]
            ]
        ]
    ];

    $ruleSet = new ValidationRuleSet($rules);
    $logger->debug('Validation rule set:' . "\n" . $inspect->variable($ruleSet));


    $validate = Validate::getInstance();


    $bike = new Bicycle(
        2,
        true,
        'swooshy',
        [
            'luggageCarrier' => false,
        ]
    );


    $logger->debug('Validate simple bike: ' . (int) $validate->challenge($bike, $ruleSet));
    $recording = $validate->challengeRecording($bike, $ruleSet);
    $logger->debug('Validate simple bike recording:' . "\n" . $inspect->variable($recording));


    $bike = new Bicycle(
        2,
        true,
        'swooshy',
        [
            'luggageCarrier' => false,
        ],
        [
            null,
            true,
            'paint',
            13,
            'rubbish'
        ]
    );

    $validate = Validate::getInstance();
    $logger->debug('Validate complex bike: ' . (int) $validate->challenge($bike, $ruleSet));
    $recording = $validate->challengeRecording($bike, $ruleSet);
    $logger->debug('Validate complex bike recording:' . "\n" . $inspect->variable($recording));
}
simple_complex_validate_test_cli();


/** */
class Bicycle
{
    public $wheels = 0;
    public $saddle;
    public $sound = '';
    public $accessories = [];
    public $various;
    /** */
    public function __construct($wheels, $saddle, $sound, $accessories, $various = [])
    {
        $this->wheels = $wheels;
        $this->saddle = $saddle;
        $this->sound = $sound;
        $this->accessories = $accessories;
        if ($various) {
            $this->various = $various;
        }
    }
}
